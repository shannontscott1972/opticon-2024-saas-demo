import { gql, type GraphQLClient } from 'graphql-request'
import type * as Types from './graphql'


export function getContentType(client: GraphQLClient, variables: Types.getContentTypeQueryVariables) : Promise<Types.getContentTypeQuery>
{
  const query = gql`query getContentType($key: String!, $version: String, $locale: [Locales!], $path: String, $domain: String) { content: _Content( where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items { _metadata { types } } } }`
  return client.request<Types.getContentTypeQuery, Types.getContentTypeQueryVariables>(query, variables)
}
export function getContentByPath(client: GraphQLClient, variables: Types.getContentByPathQueryVariables) : Promise<Types.getContentByPathQuery>
{
  const query = gql`query getContentByPath($path: [String!]!, $locale: [Locales!], $siteId: String) { content: _Content( where: {_metadata: {url: {default: {in: $path}, base: {eq: $siteId}}}} locale: $locale ) { total items { ...IContentData ...PageData ...BlankExperienceData ...ArticleGroupPageData ...ArticlePageData } } } fragment BlankExperienceData on BlankExperience { SeoSettings { ...PageSeoSettingsPropertyData } ...ExperienceData } fragment ArticleGroupPageData on ArticleGroupPage { LandingPageSeoSettings { ...PageSeoSettingsPropertyData } articleGroupTitle articleGroupIntro { json html } MainContent { ...BlockData ...ButtonBlockData ...CardBlockData ...HeaderBlockData ...MegaMenuGroupBlockData ...NavigationMenuBlockData ...OfficeLocationData ...PageSeoSettingsData ...WebsiteFooterData } } fragment ArticlePageData on ArticlePage { articleSeoSettings { ...PageSeoSettingsPropertyData } articleHeroImage { ...ReferenceData } articleSummary { json html } articleTitle articleAuthors articleBody { json html } } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename } fragment PageData on _IContent { ...IContentData } fragment PageSeoSettingsPropertyData on PageSeoSettingsProperty { metaTitle } fragment ExperienceData on _IExperience { composition { ...CompositionData } } fragment CompositionData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } ... on ICompositionStructureNode { nodes @recursive(depth: 10) { name: displayName } } ... on ICompositionElementNode { element { ...ElementData ...ArticleListElementData ...CTAElementData ...HeadingElementData ...ImageElementData ...ParagraphElementData ...TestimonialElementData } } } fragment ArticleListElementData on ArticleListElement { articleListCount } fragment CTAElementData on CTAElement { Link { ...LinkData } Text } fragment HeadingElementData on HeadingElement { headingText } fragment ImageElementData on ImageElement { altText imageLink { ...ReferenceData } } fragment ParagraphElementData on ParagraphElement { text { json html } } fragment TestimonialElementData on TestimonialElement { customerName customerLocation customerImage { ...ReferenceData } referenceTitle referenceText { json html } } fragment ElementData on _IElement { ...IElementData } fragment LinkData on ContentUrl { base hierarchical default } fragment ReferenceData on ContentReference { key url { ...LinkData } } fragment IElementData on _IElement { _metadata { ...IContentInfo } _type: __typename } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment ButtonBlockData on ButtonBlock { text link { ...LinkData } className buttonType variant } fragment CardBlockData on CardBlock { CardHeading CardSubheading CardDescription { json html } CardColor CardButton { ...ButtonBlockPropertyData } CardIcon { ...ReferenceData } CardImage { ...ReferenceData } CardImageLayout } fragment HeaderBlockData on HeaderBlock { site_logo { ...ReferenceData } site_logo_dark { ...ReferenceData } site_main_navigation { ...IContentListItem } site_utility_navigation { ...IContentListItem } } fragment MegaMenuGroupBlockData on MegaMenuGroupBlock { MenuMenuHeading MegaMenuUrl { ...LinkData } MegaMenuContentArea { ...IContentListItem } } fragment NavigationMenuBlockData on NavigationMenuBlock { MenuNavigationHeading NavigationLinks { ...LinkItemData } } fragment OfficeLocationData on OfficeLocation { OfficeTitle OfficeAddressStreet1 OfficeAddressStreet2 OfficeAddressCity OfficeAddressPostalCode OfficeAddressCountry OfficePhone OfficeEmail } fragment PageSeoSettingsData on PageSeoSettings { metaTitle } fragment WebsiteFooterData on WebsiteFooter { FooterMainOfficeLocation { ...IContentListItem } FooterFirstLinkList { ...NavigationMenuBlockPropertyData } FooterSecondLinkList { ...NavigationMenuBlockPropertyData } FooterThirdLinkList { ...NavigationMenuBlockPropertyData } FooterLogo { ...ReferenceData } FooterLogoAltText FooterLegalLinks { ...LinkItemData } } fragment BlockData on _IContent { ...IContentData } fragment ButtonBlockPropertyData on ButtonBlockProperty { text link { ...LinkData } className buttonType variant } fragment IContentListItem on _IContent { ...IContentData } fragment LinkItemData on Link { title text target url { ...LinkData } } fragment NavigationMenuBlockPropertyData on NavigationMenuBlockProperty { MenuNavigationHeading NavigationLinks { ...LinkItemData } }`
  return client.request<Types.getContentByPathQuery, Types.getContentByPathQueryVariables>(query, variables)
}
export function getContentById(client: GraphQLClient, variables: Types.getContentByIdQueryVariables) : Promise<Types.getContentByIdQuery>
{
  const query = gql`query getContentById($key: String!, $version: String, $locale: [Locales!], $path: String, $domain: String) { content: _Content( where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items { ...BlockData ...PageData ...ButtonBlockData ...CardBlockData ...HeaderBlockData ...MegaMenuGroupBlockData ...NavigationMenuBlockData ...OfficeLocationData ...PageSeoSettingsData ...WebsiteFooterData ...BlankExperienceData ...ArticleGroupPageData ...ArticlePageData } } } fragment ButtonBlockData on ButtonBlock { text link { ...LinkData } className buttonType variant } fragment CardBlockData on CardBlock { CardHeading CardSubheading CardDescription { json html } CardColor CardButton { ...ButtonBlockPropertyData } CardIcon { ...ReferenceData } CardImage { ...ReferenceData } CardImageLayout } fragment HeaderBlockData on HeaderBlock { site_logo { ...ReferenceData } site_logo_dark { ...ReferenceData } site_main_navigation { ...IContentListItem } site_utility_navigation { ...IContentListItem } } fragment MegaMenuGroupBlockData on MegaMenuGroupBlock { MenuMenuHeading MegaMenuUrl { ...LinkData } MegaMenuContentArea { ...IContentListItem } } fragment NavigationMenuBlockData on NavigationMenuBlock { MenuNavigationHeading NavigationLinks { ...LinkItemData } } fragment OfficeLocationData on OfficeLocation { OfficeTitle OfficeAddressStreet1 OfficeAddressStreet2 OfficeAddressCity OfficeAddressPostalCode OfficeAddressCountry OfficePhone OfficeEmail } fragment PageSeoSettingsData on PageSeoSettings { metaTitle } fragment WebsiteFooterData on WebsiteFooter { FooterMainOfficeLocation { ...IContentListItem } FooterFirstLinkList { ...NavigationMenuBlockPropertyData } FooterSecondLinkList { ...NavigationMenuBlockPropertyData } FooterThirdLinkList { ...NavigationMenuBlockPropertyData } FooterLogo { ...ReferenceData } FooterLogoAltText FooterLegalLinks { ...LinkItemData } } fragment BlankExperienceData on BlankExperience { SeoSettings { ...PageSeoSettingsPropertyData } ...ExperienceData } fragment ArticleGroupPageData on ArticleGroupPage { LandingPageSeoSettings { ...PageSeoSettingsPropertyData } articleGroupTitle articleGroupIntro { json html } MainContent { ...BlockData ...ButtonBlockData ...CardBlockData ...HeaderBlockData ...MegaMenuGroupBlockData ...NavigationMenuBlockData ...OfficeLocationData ...PageSeoSettingsData ...WebsiteFooterData } } fragment ArticlePageData on ArticlePage { articleSeoSettings { ...PageSeoSettingsPropertyData } articleHeroImage { ...ReferenceData } articleSummary { json html } articleTitle articleAuthors articleBody { json html } } fragment BlockData on _IContent { ...IContentData } fragment PageData on _IContent { ...IContentData } fragment LinkData on ContentUrl { base hierarchical default } fragment ButtonBlockPropertyData on ButtonBlockProperty { text link { ...LinkData } className buttonType variant } fragment ReferenceData on ContentReference { key url { ...LinkData } } fragment IContentListItem on _IContent { ...IContentData } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment LinkItemData on Link { title text target url { ...LinkData } } fragment NavigationMenuBlockPropertyData on NavigationMenuBlockProperty { MenuNavigationHeading NavigationLinks { ...LinkItemData } } fragment PageSeoSettingsPropertyData on PageSeoSettingsProperty { metaTitle } fragment ExperienceData on _IExperience { composition { ...CompositionData } } fragment CompositionData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } ... on ICompositionStructureNode { nodes @recursive(depth: 10) { name: displayName } } ... on ICompositionElementNode { element { ...ElementData ...ArticleListElementData ...CTAElementData ...HeadingElementData ...ImageElementData ...ParagraphElementData ...TestimonialElementData } } } fragment ArticleListElementData on ArticleListElement { articleListCount } fragment CTAElementData on CTAElement { Link { ...LinkData } Text } fragment HeadingElementData on HeadingElement { headingText } fragment ImageElementData on ImageElement { altText imageLink { ...ReferenceData } } fragment ParagraphElementData on ParagraphElement { text { json html } } fragment TestimonialElementData on TestimonialElement { customerName customerLocation customerImage { ...ReferenceData } referenceTitle referenceText { json html } } fragment ElementData on _IElement { ...IElementData } fragment IElementData on _IElement { _metadata { ...IContentInfo } _type: __typename }`
  return client.request<Types.getContentByIdQuery, Types.getContentByIdQueryVariables>(query, variables)
}

